// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: oauth2.proto

package oauth2

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Oauth2 service

type Oauth2Service interface {
	// 获取AccessToken
	AccessToken(ctx context.Context, in *AccessTokenReq, opts ...client.CallOption) (*AccessTokenReply, error)
	// 验证AccessToken
	VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...client.CallOption) (*VerifyTokenReply, error)
	// 刷新AccessToken
	RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...client.CallOption) (*RefreshTokenReply, error)
	// 删除AccessToken
	RemoveToken(ctx context.Context, in *RemoveTokenReq, opts ...client.CallOption) (*RemoveTokenReply, error)
}

type oauth2Service struct {
	c    client.Client
	name string
}

func NewOauth2Service(name string, c client.Client) Oauth2Service {
	return &oauth2Service{
		c:    c,
		name: name,
	}
}

func (c *oauth2Service) AccessToken(ctx context.Context, in *AccessTokenReq, opts ...client.CallOption) (*AccessTokenReply, error) {
	req := c.c.NewRequest(c.name, "Oauth2.AccessToken", in)
	out := new(AccessTokenReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauth2Service) VerifyToken(ctx context.Context, in *VerifyTokenReq, opts ...client.CallOption) (*VerifyTokenReply, error) {
	req := c.c.NewRequest(c.name, "Oauth2.VerifyToken", in)
	out := new(VerifyTokenReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauth2Service) RefreshToken(ctx context.Context, in *RefreshTokenReq, opts ...client.CallOption) (*RefreshTokenReply, error) {
	req := c.c.NewRequest(c.name, "Oauth2.RefreshToken", in)
	out := new(RefreshTokenReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oauth2Service) RemoveToken(ctx context.Context, in *RemoveTokenReq, opts ...client.CallOption) (*RemoveTokenReply, error) {
	req := c.c.NewRequest(c.name, "Oauth2.RemoveToken", in)
	out := new(RemoveTokenReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Oauth2 service

type Oauth2Handler interface {
	// 获取AccessToken
	AccessToken(context.Context, *AccessTokenReq, *AccessTokenReply) error
	// 验证AccessToken
	VerifyToken(context.Context, *VerifyTokenReq, *VerifyTokenReply) error
	// 刷新AccessToken
	RefreshToken(context.Context, *RefreshTokenReq, *RefreshTokenReply) error
	// 删除AccessToken
	RemoveToken(context.Context, *RemoveTokenReq, *RemoveTokenReply) error
}

func RegisterOauth2Handler(s server.Server, hdlr Oauth2Handler, opts ...server.HandlerOption) error {
	type oauth2 interface {
		AccessToken(ctx context.Context, in *AccessTokenReq, out *AccessTokenReply) error
		VerifyToken(ctx context.Context, in *VerifyTokenReq, out *VerifyTokenReply) error
		RefreshToken(ctx context.Context, in *RefreshTokenReq, out *RefreshTokenReply) error
		RemoveToken(ctx context.Context, in *RemoveTokenReq, out *RemoveTokenReply) error
	}
	type Oauth2 struct {
		oauth2
	}
	h := &oauth2Handler{hdlr}
	return s.Handle(s.NewHandler(&Oauth2{h}, opts...))
}

type oauth2Handler struct {
	Oauth2Handler
}

func (h *oauth2Handler) AccessToken(ctx context.Context, in *AccessTokenReq, out *AccessTokenReply) error {
	return h.Oauth2Handler.AccessToken(ctx, in, out)
}

func (h *oauth2Handler) VerifyToken(ctx context.Context, in *VerifyTokenReq, out *VerifyTokenReply) error {
	return h.Oauth2Handler.VerifyToken(ctx, in, out)
}

func (h *oauth2Handler) RefreshToken(ctx context.Context, in *RefreshTokenReq, out *RefreshTokenReply) error {
	return h.Oauth2Handler.RefreshToken(ctx, in, out)
}

func (h *oauth2Handler) RemoveToken(ctx context.Context, in *RemoveTokenReq, out *RemoveTokenReply) error {
	return h.Oauth2Handler.RemoveToken(ctx, in, out)
}
